buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
        wrapperVersion = '1.0.13.BUILD-SNAPSHOT'
        shadowVersion = '2.0.1'
    }
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:${shadowVersion}"
        classpath("org.springframework.boot.experimental:spring-boot-thin-gradle-plugin:${wrapperVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.springframework.boot.experimental.thin-launcher'

group 'aws-spring-cloud-function-gradle'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    springCloudFunctionVersion = "2.0.0.BUILD-SNAPSHOT"
    awsLambdaEventsVersion = "1.2.1"
    awsLambdaCoreVersion = "1.1.0"
}
ext['reactor.version'] = "3.1.7.RELEASE"

assemble.dependsOn = [shadowJar, thinJar]

jar {
    manifest {
        attributes 'Main-Class': 'com.serverless.CloudFunctionApplication'
    }
}
import com.github.jengelman.gradle.plugins.shadow.transformers.*

shadowJar {
    classifier = 'aws'
    dependencies {
        exclude(
                dependency("org.springframework.cloud:spring-cloud-function-web:${springCloudFunctionVersion}"))
    }
    // Required for Spring
    mergeServiceFiles()
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    transform(PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories']
        mergeStrategy = "append"
    }
}

configurations {
    testCompile.extendsFrom(compileOnly)
}

dependencies {
//    compile("org.springframework.cloud:spring-cloud-starter-function-web:${springCloudFunctionVersion}")
//    compileOnly("com.amazonaws:aws-lambda-java-log4j:1.0.0")
//    testCompile('org.springframework.boot:spring-boot-starter-test')
//    compile group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version: '1.11.521'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-function-web', version: '2.0.1.RELEASE'
    compile("org.springframework.cloud:spring-cloud-function-adapter-aws:${springCloudFunctionVersion}")
    compileOnly("com.amazonaws:aws-lambda-java-events:${awsLambdaEventsVersion}")
    compileOnly("com.amazonaws:aws-lambda-java-core:${awsLambdaCoreVersion}")
}

//dependencies {
//    compile (
//        'com.amazonaws:aws-lambda-java-core:1.1.0',
//        'com.amazonaws:aws-lambda-java-log4j:1.0.0',
//        'com.fasterxml.jackson.core:jackson-core:2.8.5',
//        'com.fasterxml.jackson.core:jackson-databind:2.8.5',
//        'com.fasterxml.jackson.core:jackson-annotations:2.8.5'
//    )
//    compile group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version: '1.11.521'
//}

// Task for building the zip file for upload
//task buildZip(type: Zip) {
//    // Using the Zip API from gradle to build a zip file of all the dependencies
//    //
//    // The path to this zip file can be set in the serverless.yml file for the
//    // package/artifact setting for deployment to the S3 bucket
//    //
//    // Link: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Zip.html
//
//    // set the base name of the zip file
//    baseName = "hello"
//    from compileJava
//    from processResources
//    into('lib') {
//        from configurations.runtime
//    }
//}
//
//build.dependsOn buildZip

//task wrapper(type: Wrapper) {
//    gradleVersion = '5.3'
//}
